<?xml version='1.0' encoding='utf-8' ?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [
<!ENTITY % BOOK_ENTITIES SYSTEM "Secure_Ruby_Development_Guide.ent">
%BOOK_ENTITIES;
]>

<section>
  <title>Static code analysis with Brakeman</title>
  <para>
    <ulink url="http://brakemanscanner.org">Brakeman</ulink> is a static code scanner for Ruby on Rails applications. It does not require any configuration and can be run out-of-the-box on source of rails application. It performs static code analysis, so it does not require rails application to be set up, but rather parses the source code and looks for common vulnerable patterns.
  </para>
  <para>
    Brakeman gem is signed, but some of its dependencies are not, so to install run:
    <programlisting>
$ gem install -P MediumSecurity brakeman
    </programlisting>
  </para>
  <para>
    To execute scan on application, run brakeman from rails application repository:
    <programlisting>
$ brakeman -o report.html --path &lt;path to rails app&gt;
    </programlisting>
  </para>
  <para>
    The format of the output is determined by file extension or by <command>-f</command> flag. Currently supported formats are <constant>html</constant>,<constant>json</constant>,<constant>tabs</constant>, <constant>csv</constant> and <constant>text</constant>.
  </para>
  <para>
    Brakeman output contains warnings in format
    <programlisting>
+------------+-------+--------+-------------------+-----------------------------------------+
| Confidence | Class | Method | Warning Type      | Message                                 |
+------------+-------+--------+-------------------+-----------------------------------------+
| High       | Foo   | bar    | Denial of Service | Symbol conversion from unsafe String .. |
    </programlisting>
  </para>
  <para>
    As static code scanner Brakeman does not analyze the behaviour of code when run 
    and lacks execution context (e.g. it does not know about dead code that`s never
    executed). Therefore Brakeman output usually contains also false warnings.
    There are 3 confidence levels to help developers determine possible false 
    warnings and prioritize when reviewing the output: <constant>High</constant>, 
    <constant>Medium</constant> and <constant>Weak</constant>.
  </para>
  <section>
    <title>Continuous integration</title>
    <para>
      Good way to use Brakeman is to integrate it into workflow of a project 
      and fix the reported problems before they are committed into repository.
    </para>
    <para>
      Creating a rake task is easy with
      <programlisting>
$ brakeman --rake
      </programlisting>
      which creates file <filename>lib/tasks/brakeman.rake</filename>
    </para>
    <para>
      Another useful options is to create a configuration file from a command
      line options:
      <programlisting>
$ brakeman -C &lt;config file&gt; &lt;options&gt;
      </programlisting>
      which can be later used:
      <programlisting>
$ brakeman -c &lt;config file&gt;
      </programlisting>
    </para>
    <para>
      Very useful feature is comparison with older scan result and outputting 
      only difference between reports - developers can then easily identify 
      warnings that were just added or fixed:
      <programlisting>
$ brakeman --compare &lt;old result in json&gt; -o &lt;output in json&gt;
      </programlisting>
      The output is always in json (<command>-f</command> is ignored).
    </para>
  </section>
  <section>
    <title>Reducing number of false warnings</title>
    <para>
      There are several ways to reduce number of false warnings, most of which 
      can be dangerous. Reducing number of false warnings might be meaningful
      when Brakeman is adopted by an existing project - in such cases initial
      report can be overwhelming and ignoring warnings that are likely to be false
      can be crucial. However, this shall be considered only temporary solution.
      <important>
        <para>
          Reduction of false warnings by skipping certain checks or ignoring
          certain files is dangerous. Even if all currently reported warnings 
          are false, future commits might introduce flaws that would otherwise
          be reported. This greatly reduces effectiveness of Brakeman and its 
          value for project.
        </para>
      </important>
    </para>

    <para>
      One way to reduce number of warnings is to set minimum confidence level:
      <programlisting>
$ brakeman -w &lt;level&gt;
      </programlisting>
      where level <constant>1</constant> indicates Weak confidence, level
       <constant>2</constant> Medium and <constant>3</constant> High confidence.
    </para>

    <para>
      Another option is to specify list of safe methods:
      <programlisting>
$ brakeman -s &lt;comma separated list of methods&gt;
      </programlisting>
    </para>
    <para>
      This will add methods to the set of known safe methods and certain checks
      will skip them without producing a warning. For example, Cross site scripting
      checker maintains a set of methods which produce safe output (it contains
      methods like <command>escapeHTML</command>) and safe methods specified 
      as command line argument are added to the list.
    </para>
    <para>
      You can skip processing <filename>lib</filename> directory and/or specify 
      files to be skipped:
      <programlisting>
$ brakeman --skip-libs
$ brakeman --skip-files &lt;comma separated list of files&gt;
      </programlisting>
    </para>
  </section>
</section>